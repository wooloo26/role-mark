// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// PERSONAL DATA (User-Related)
// ============================================

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String? // For credentials authentication
  settings      Json? // Theme preferences, NSFW toggle, etc.
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime? // Soft delete timestamp

  // NextAuth.js relations
  accounts Account[]
  sessions Session[]

  // User content relations
  comments  Comment[]
  resources Resource[] @relation("ResourceUploader")
  wikiPages WikiPage[] @relation("WikiPageAuthor")

  @@index([deletedAt])
  @@map("users")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Comment {
  id        String    @id @default(cuid())
  content   String    @db.Text
  authorId  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Soft delete timestamp

  author     User                 @relation(fields: [authorId], references: [id], onDelete: Cascade)
  characters CharacterOnComment[]

  @@index([authorId])
  @@index([createdAt])
  @@index([deletedAt])
  @@map("comments")
}

// ============================================
// PUBLIC DATA
// ============================================

model Character {
  id          String               @id @default(cuid())
  name        String
  avatarUrl   String?
  portraitUrl String?
  info        String?              @db.Text // Summary text (Markdown-supported)
  // Static tags are stored in the dedicated StaticTagDefinition model and associated via CharacterStaticTag
  staticTags  CharacterStaticTag[]
  // dynamic tags are stored in the dedicated Tag model and associated via CharacterTag
  tags        CharacterTag[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  deletedAt   DateTime? // Soft delete timestamp

  // Many-to-many relations
  resources CharacterOnResource[]
  wikiPages CharacterOnWikiPage[]
  comments  CharacterOnComment[]

  // Self-referencing relationship
  relationsFrom CharacterRelation[] @relation("CharacterFrom")
  relationsTo   CharacterRelation[] @relation("CharacterTo")

  @@index([name])
  @@index([deletedAt])
  @@map("characters")
}

model RelationType {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "siblings", "rivals", "friends"
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  relations CharacterRelation[]

  @@index([name])
  @@map("relation_types")
}

model CharacterRelation {
  id              String   @id @default(cuid())
  fromCharacterId String
  toCharacterId   String
  relationTypeId  String
  isBidirectional Boolean  @default(false)
  createdAt       DateTime @default(now())

  fromCharacter Character    @relation("CharacterFrom", fields: [fromCharacterId], references: [id], onDelete: Cascade)
  toCharacter   Character    @relation("CharacterTo", fields: [toCharacterId], references: [id], onDelete: Cascade)
  relationType  RelationType @relation(fields: [relationTypeId], references: [id], onDelete: Cascade)

  @@unique([fromCharacterId, toCharacterId, relationTypeId])
  @@index([fromCharacterId])
  @@index([toCharacterId])
  @@index([relationTypeId])
  @@map("character_relations")
}

// =============================
// RESOURCE TYPES & CONTENT TYPES
// =============================

enum ResourceType {
  SINGLE_FILE // A single file resource
  FILE_ARRAY // Multiple independent files
  FOLDER // A bundle of related files treated as one logical unit
}

enum ContentType {
  IMAGE // Images requiring preview generation
  VIDEO // Videos requiring playback support
  OTHER // Generic files without special handling
}

model Resource {
  id           String        @id @default(cuid())
  title        String
  description  String?       @db.Text // Optional description of the resource
  type         ResourceType // Type of resource: single file, file array, or folder
  contentType  ContentType? // Content type for processing logic (only for SINGLE_FILE and FILE_ARRAY, null for FOLDER)
  thumbnailUrl String? // URL/path to the thumbnail image
  uploaderId   String?
  // dynamic tags are stored in the dedicated Tag model and associated via ResourceTag
  tags         ResourceTag[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime? // Soft delete timestamp

  uploader   User?                 @relation("ResourceUploader", fields: [uploaderId], references: [id], onDelete: SetNull)
  files      ResourceFile[] // Individual files belonging to this resource
  characters CharacterOnResource[]

  @@index([title])
  @@index([type])
  @@index([contentType]) // Nullable - only for SINGLE_FILE and FILE_ARRAY
  @@index([uploaderId])
  @@index([type, contentType]) // Combined index for filtering SINGLE_FILE and FILE_ARRAY by content type
  @@index([deletedAt])
  @@map("resources")
}

model ResourceFile {
  id         String    @id @default(cuid())
  resourceId String
  fileName   String // Original file name
  fileUrl    String // Storage URL/path
  mimeType   String // MIME type of the file
  fileSize   Int? // File size in bytes
  order      Int       @default(0) // Order for files in FILE_ARRAY or FOLDER
  metadata   Json? // Additional metadata (dimensions, duration, etc.)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime? // Soft delete timestamp

  resource Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@index([resourceId])
  @@index([resourceId, order]) // For efficient ordered retrieval
  @@index([deletedAt])
  @@map("resource_files")
}

model WikiPage {
  id                  String    @id @default(cuid())
  title               String
  content             String    @db.Text // Markdown content
  authorId            String?
  aiSuggestionEnabled Boolean   @default(false)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  deletedAt           DateTime? // Soft delete timestamp

  author     User?                 @relation("WikiPageAuthor", fields: [authorId], references: [id], onDelete: SetNull)
  characters CharacterOnWikiPage[]
  versions   WikiPageVersion[]

  @@index([title])
  @@index([authorId])
  @@index([deletedAt])
  @@map("wiki_pages")
}

model WikiPageVersion {
  id         String   @id @default(cuid())
  wikiPageId String
  title      String
  content    String   @db.Text
  version    Int
  createdAt  DateTime @default(now())

  wikiPage WikiPage @relation(fields: [wikiPageId], references: [id], onDelete: Cascade)

  @@unique([wikiPageId, version])
  @@index([wikiPageId])
  @@map("wiki_page_versions")
}

// =============================
// DYNAMIC TAGS (Shared / Public)
// =============================

enum TagScope {
  CHARACTER
  RESOURCE
}

model TagGroup {
  id        String   @id @default(cuid())
  name      String
  scope     TagScope
  tags      Tag[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([scope])
  @@map("tag_groups")
}

model Tag {
  id            String         @id @default(cuid())
  name          String
  slug          String         @unique
  groupId       String?
  scope         TagScope
  group         TagGroup?      @relation(fields: [groupId], references: [id], onDelete: SetNull)
  characterTags CharacterTag[]
  resourceTags  ResourceTag[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([name])
  @@index([scope])
  @@map("tags")
}

model CharacterTag {
  characterId String
  tagId       String
  assignedAt  DateTime @default(now())

  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  tag       Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([characterId, tagId])
  @@index([characterId])
  @@index([tagId])
  @@map("character_tags")
}

model ResourceTag {
  resourceId String
  tagId      String
  assignedAt DateTime @default(now())

  resource Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([resourceId, tagId])
  @@index([resourceId])
  @@index([tagId])
  @@map("resource_tags")
}

// =============================
// STATIC TAGS (Character Attributes)
// =============================

enum StaticTagDataType {
  STRING
  NUMBER
  DATE
  BOOLEAN
}

model StaticTagDefinition {
  id          String            @id @default(cuid())
  name        String            @unique // e.g., "height", "weight", "birthday"
  displayName String // e.g., "Height", "Weight", "Birthday"
  dataType    StaticTagDataType
  unit        String? // e.g., "cm", "kg" for measurements
  description String?
  isRequired  Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  characterStaticTags CharacterStaticTag[]

  @@index([name])
  @@map("static_tag_definitions")
}

model CharacterStaticTag {
  id          String   @id @default(cuid())
  characterId String
  tagDefId    String
  value       String // Stored as string, parsed based on dataType from definition
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  character     Character           @relation(fields: [characterId], references: [id], onDelete: Cascade)
  tagDefinition StaticTagDefinition @relation(fields: [tagDefId], references: [id], onDelete: Cascade)

  @@unique([characterId, tagDefId])
  @@index([characterId])
  @@index([tagDefId])
  @@index([tagDefId, value]) // Enable efficient filtering by tag definition and value
  @@index([characterId, tagDefId, value]) // Composite index for character-specific tag queries
  @@map("character_static_tags")
}

// ============================================
// JOIN TABLES (Many-to-Many Relations)
// ============================================

model CharacterOnResource {
  characterId String
  resourceId  String
  assignedAt  DateTime @default(now())

  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  resource  Resource  @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@id([characterId, resourceId])
  @@index([characterId])
  @@index([resourceId])
  @@map("character_on_resource")
}

model CharacterOnWikiPage {
  characterId String
  wikiPageId  String
  assignedAt  DateTime @default(now())

  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  wikiPage  WikiPage  @relation(fields: [wikiPageId], references: [id], onDelete: Cascade)

  @@id([characterId, wikiPageId])
  @@index([characterId])
  @@index([wikiPageId])
  @@map("character_on_wiki_page")
}

model CharacterOnComment {
  characterId String
  commentId   String
  assignedAt  DateTime @default(now())

  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  comment   Comment   @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([characterId, commentId])
  @@index([characterId])
  @@index([commentId])
  @@map("character_on_comment")
}
